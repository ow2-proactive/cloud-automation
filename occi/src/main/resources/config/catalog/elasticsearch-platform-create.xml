<?xml version="1.0" encoding="UTF-8"?>
<job xmlns="urn:proactive:jobdescriptor:dev" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="urn:proactive:jobdescriptor:dev ../../src/scheduler/src/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/dev/schedulerjob.xsd"
     name="elasticsearch-platform-create" priority="normal" cancelJobOnError="true">
    <variables>

        <!-- Provided by proactive rule -->
        <variable name="proactive.rm.url"/>
        <variable name="proactive.protocol"/>
        <variable name="proactive.router_port"/>
        <variable name="proactive.router_address"/>
        <variable name="proactive.credentials"/>
        <variable name="proactive.node_source_name"/>

        <!-- Provided by numergy rule -->
        <variable name="numergy.accesskey"/>
        <variable name="numergy.secretkey"/>
        <variable name="numergy.tenantid"/>
        <variable name="numergy.endpoint"/>
        <variable name="numergy.metadataserver"/>
        <variable name="numergy.vm.instanceref"/>
        <variable name="numergy.vm.name"/>

        <!-- Provided by elasticsearch rule -->
        <variable name="paas.elasticsearch.node.name"/>
        <variable name="paas.elasticsearch.master.ip" value=""/>

    </variables>

    <genericInformation>
        <info name="category" value="platform"/>
        <info name="operation" value="create"/>
        <info name="action" value="start"/>
        <info name="provider" value="numergy"/>
        <info name="rule" value="numergy"/>
        <info name="application" value="elasticsearch"/>
        <info name="flavor" value="single"/>
    </genericInformation>

    <taskFlow>

        <task name="deploy-vm">
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

import org.ow2.proactive.iaas.IaasInstance
import org.ow2.proactive.iaas.numergy.NumergyAPI
import net.minidev.json.JSONObject

String accessKey = '${numergy.accesskey}'
String secretKey = '${numergy.secretkey}'
String tenantId = '${numergy.tenantid}'
String uri = '${numergy.endpoint}'
String metadataServer = '${numergy.metadataserver}'
String instanceRef = '${numergy.vm.instanceref}'
String name = '${numergy.vm.name}'

String rm_url='${proactive.rm.url}'
String protocol='${proactive.protocol}'
String router_port='${proactive.router_port}'
String router_address='${proactive.router_address}'
String credentials='${proactive.credentials}'
String node_source_name='${proactive.node_source_name}'
String node_name = name
String token = name

def mdmap = new HashMap<String, String>();
mdmap.put("rm_url", rm_url);
mdmap.put("protocol", protocol);
mdmap.put("router_port", router_port);
mdmap.put("router_address", router_address);
mdmap.put("credentials", credentials);
mdmap.put("node_source_name", node_source_name);
mdmap.put("node_name", node_name);
mdmap.put("token", token);
def metadata = new JSONObject(mdmap).toJSONString()

println ">>> Logging to Numergy..."

NumergyAPI api = NumergyAPI.getNumergyAPI(
        accessKey, secretKey, tenantId,
        new URI(uri), new URI(metadataServer));

def map = new HashMap<String, String>();
map.put("instanceRef", instanceRef);
map.put("name", name);
map.put("metadata", metadata);

println ">>> Deploying VM..."

def instance = api.startInstance(map)

println ">>> VM deployed: " + instance.instanceId

while (!api.isInstanceStarted(instance)) {
    println ">>> Waiting for instance to be started..."
    Thread.sleep(1000 * 60 * 1)
}

println ">>> VM started correctly."

result = instance.instanceId

def json = new net.minidev.json.JSONObject();
json.put("occi.compute.vendor.vmpath", instance.instanceId)
json.put("occi.compute.state", "up")
result = json.toJSONString()
println result

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>

        <task name="start-es">
            <genericInformation>
                <info name="NODE_ACCESS_TOKEN" value="${numergy.vm.name}"/>
            </genericInformation>
            <depends>
                <task ref="deploy-vm"/>
            </depends>
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

import org.apache.commons.io.FileUtils

def elasticSearchMasterIp = '${paas.elasticsearch.master.ip}'
def elasticSearchNodeName = '${numergy.vm.name}'

def SEP = File.separator
def configFilePath = SEP + "etc" + SEP + "elasticsearch" + SEP + "elasticsearch.yml"

// Create/modify config file
def masterConfigLines = new StringBuilder()
masterConfigLines.append("node.name: ")
masterConfigLines.append(elasticSearchNodeName)
masterConfigLines.append("\n")
masterConfigLines.append("discovery.zen.ping.multicast.enabled: false")
masterConfigLines.append("\n")
masterConfigLines.append("discovery.zen.ping.unicast.hosts: [\"")
masterConfigLines.append(elasticSearchMasterIp)
masterConfigLines.append("\"]")
masterConfigLines.append("\n")

println "Writing to file: $configFilePath the following:"
println "---"
println "$masterConfigLines"
println "---"

def configFile = new File(configFilePath)

if (configFile.exists())
    FileUtils.writeStringToFile(configFile, masterConfigLines.toString());
else
    throw new RuntimeException("Config file not found: $configFilePath")

// Start ElasticSearch

println "service elasticsearch start".execute().text

def json = new net.minidev.json.JSONObject()
json.put("occi.paas.status", "up")
result = json.toJSONString()
println result

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>

        <task name="update-occi">
            <genericInformation>
                <info name="NODE_ACCESS_TOKEN" value="${numergy.vm.name}"/>
            </genericInformation>
            <depends>
                <task ref="deploy-vm"/>
            </depends>
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

String name = '${numergy.vm.name}'

String ifconfig = "ifconfig eth0".execute().text.trim()
String hostname = "hostname".execute().text.trim()

println "IFCONFIG COMMAND: '$ifconfig'"
println "HOSTNAME COMMAND: '$hostname'"

def regex = /(?s).*inet addr:(.*?)Bcast:.*/
def matcher = (ifconfig=~regex)

def ip = "unknownip"
if (matcher.matches()) {
    ip = matcher.group(1).trim()
} else {
    println("Cannot extract IP")
}

def json = new net.minidev.json.JSONObject();
json.put("occi.networkinterface.address", ip.trim())
json.put("occi.compute.hostname", name.trim())
json.put("occi.compute.organization.name", hostname.trim())
json.put("action.state", "done")
json.put("occi.compute.state", "up")
json.put("occi.paas.application.endpoints", "http://" + ip.trim() + ":9200")
result = json.toJSONString()
println result

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>
    </taskFlow>

</job>
