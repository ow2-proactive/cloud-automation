<?xml version="1.0" encoding="UTF-8"?>
<job xmlns="urn:proactive:jobdescriptor:dev" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:proactive:jobdescriptor:dev ../../src/scheduler/src/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/dev/schedulerjob.xsd" name="elasticsearch-platform-create" priority="normal" cancelJobOnError="true">

    <variables>

        <!-- Provided by proactive rule -->

        <variable name="occi.compute.hostname"/>
        <variable name="paas.elasticsearch.master.ip" value=""/>

        <!-- Provided by rule -->
        <variable name="proactive.rm.url"/>
        <variable name="proactive.router.protocol"/>
        <variable name="proactive.router.port"/>
        <variable name="proactive.router.address"/>
        <variable name="proactive.rm.credentials"/>
        <variable name="proactive.rm.nodesource.name"/>
        <variable name="iaas.provider.api.user"/>
        <variable name="iaas.provider.api.password"/>
        <variable name="iaas.provider.api.tenant"/>
        <variable name="iaas.provider.api.url"/>
        <variable name="iaas.provider.vm.flavor"/>
        <variable name="iaas.provider.vm.image"/>
        <variable name="iaas.provider.vm.image.proactive.home"/>
        <variable name="iaas.provider.vm.image.java.home"/>

    </variables>


    <jobClasspath>
        <pathElement path="/tmp/addons/commons-codec-1.6.jar"/>
        <pathElement path="/tmp/addons/commons-io-1.3.2.jar"/>
        <pathElement path="/tmp/addons/commons-lang-2.6.jar"/>
        <pathElement path="/tmp/addons/commons-logging-1.1.1.jar"/>
        <pathElement path="/tmp/addons/connectors-3.5.0-SNAPSHOT.jar"/>
        <pathElement path="/tmp/addons/httpclient-4.2.1.jar"/>
        <pathElement path="/tmp/addons/httpcore-4.2.1.jar"/>
        <pathElement path="/tmp/addons/iaas-api-3.5.0-SNAPSHOT.jar"/>
        <pathElement path="/tmp/addons/json-path-0.8.1.jar"/>
        <pathElement path="/tmp/addons/json-smart-1.1.1.jar"/>
        <pathElement path="/tmp/addons/monitoring-3.5.0-SNAPSHOT.jar"/>
        <pathElement path="/tmp/addons/nova-3.5.0-SNAPSHOT.jar"/>
        <pathElement path="/tmp/addons/rest-api-schemas-5.1.0.jar"/>
        <pathElement path="/tmp/addons/occi-1.0-SNAPSHOT.jar"/>
    </jobClasspath>

    <genericInformation>
        <info name="category" value="platform"/>
        <info name="operation" value="create"/>
        <info name="action" value="start"/>
        <info name="provider" value="openstack"/>
        <info name="application" value="elasticsearch"/>
        <info name="flavor" value="single"/>
    </genericInformation>



    <taskFlow>

        <task name="deploy-vm">
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

import org.ow2.proactive.iaas.*
import org.ow2.proactive.iaas.nova.*
import net.minidev.json.JSONObject

String accessKey = '${iaas.provider.api.user}'
String secretKey = '${iaas.provider.api.password}'
String tenantId = '${iaas.provider.api.tenant}'
String uri = '${iaas.provider.api.url}'
String image = '${iaas.provider.vm.image}'
String flavor = '${iaas.provider.vm.flavor}'

String proactiveHome = '${iaas.provider.vm.image.proactive.home}'
String javaHome = '${iaas.provider.vm.image.java.home}'

String name = '${occi.compute.hostname}'

String rm_url='${proactive.rm.url}'
String protocol='${proactive.router.protocol}'
String router_port='${proactive.router.port}'
String router_address='${proactive.router.address}'
String credentials='${proactive.rm.credentials}'
String node_source_name='${proactive.rm.nodesource.name}'
String node_name = name
String token = name

String userdata =
    "#!/bin/bash\n" +
    "set -x\n" +
    "export LOGS=/tmp/rm-start-node.log\n" +
    "export JAVA_HOME="+javaHome+"\n" +
    "export CMD=\"$proactiveHome/bin/unix/rm-start-node -Dproactive.useIPaddress=true -Dproactive.net.nolocal=true -Dproactive.node.access.token=$token -Dproactive.hostname=$node_name -Dproactive.agent.rank=0 -Dproactive.communication.protocol=$protocol -Dproactive.pamr.router.address=$router_address -Dproactive.pamr.router.port=$router_port -r $rm_url -s $node_source_name -n $node_name -v $credentials \"\n" +
    "echo \$CMD > \$LOGS\n" +
    "date >> \$LOGS\n" +
    "\$CMD &>> \$LOGS\n"

println ">>> Logging to OpenStack..."

def api = NovaAPI.getNovaAPI(
        accessKey, secretKey, tenantId,
        new URI(uri));

def map = new HashMap<String, String>();
map.put(NovaAPI.NovaAPIConstants.InstanceParameters.USER_DATA, userdata);
map.put(NovaAPI.NovaAPIConstants.InstanceParameters.FLAVOR_REF, flavor);
map.put(NovaAPI.NovaAPIConstants.InstanceParameters.IMAGE_REF, image);
map.put(NovaAPI.NovaAPIConstants.InstanceParameters.NAME, name);

println ">>> Deploying VM..."

def instance = api.startInstance(map)

println ">>> VM deployed: " + instance.instanceId

def counter = 0
def ATTEMPTS = 15
while (!api.isInstanceStarted(instance)) {
    println ">>> Waiting for instance to be started..."
    Thread.sleep(1000 * 60 * 1)
    if (counter++ > ATTEMPTS)
        throw new RuntimeException("VM won't execute")
}

println ">>> VM started correctly."

result = instance.instanceId

def json = new net.minidev.json.JSONObject();
json.put("occi.compute.vendor.uuid", instance.instanceId)
json.put("occi.compute.state", "up")
result = json.toJSONString()
println result

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>


        <task name="install-es">
            <genericInformation>
                <info name="NODE_ACCESS_TOKEN" value="${occi.compute.hostname}"/>
            </genericInformation>
            <depends>
                <task ref="deploy-vm"/>
            </depends>
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

import org.apache.commons.io.FileUtils

// Download ElasticSearch
def p = "wget 10.0.0.1:8090/elasticsearch-1.1.1.deb".execute()
println "stderr: " + p.err.text
println "stdout: " + p.text
p.waitFor()
if (p.exitValue() != 0) throw new RuntimeException("exitValue: " + p.exitValue());

// Install ElasticSearch
p = "dpkg -i elasticsearch-1.1.1.deb".execute()
println "stderr: " + p.err.text
println "stdout: " + p.text
p.waitFor()
if (p.exitValue() != 0) throw new RuntimeException("exitValue: " + p.exitValue());

def json = new net.minidev.json.JSONObject()
result = json.toJSONString()
println result

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>


        <task name="start-es">
            <genericInformation>
                <info name="NODE_ACCESS_TOKEN" value="${occi.compute.hostname}"/>
            </genericInformation>
            <depends>
                <task ref="install-es"/>
            </depends>
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

import org.apache.commons.io.FileUtils

def elasticSearchMasterIp = '${paas.elasticsearch.master.ip}'
def elasticSearchNodeName = '${occi.compute.hostname}'

def SEP = File.separator
def configFilePath = SEP + "etc" + SEP + "elasticsearch" + SEP + "elasticsearch.yml"

// Create/modify config file
def masterConfigLines = new StringBuilder()
masterConfigLines.append("node.name: ")
masterConfigLines.append(elasticSearchNodeName)
masterConfigLines.append("\n")
masterConfigLines.append("discovery.zen.ping.multicast.enabled: false")
masterConfigLines.append("\n")
masterConfigLines.append("discovery.zen.ping.unicast.hosts: [\"")
masterConfigLines.append(elasticSearchMasterIp)
masterConfigLines.append("\"]")
masterConfigLines.append("\n")

println "Writing to file: $configFilePath the following:"
println "---"
println "$masterConfigLines"
println "---"

def configFile = new File(configFilePath)

if (configFile.exists())
    FileUtils.writeStringToFile(configFile, masterConfigLines.toString());
else
    throw new RuntimeException("Config file not found: $configFilePath")

// Start ElasticSearch

def p = "service elasticsearch start".execute()
println "stderr: " + p.err.text
println "stdout: " + p.text
p.waitFor()
if (p.exitValue() != 0) throw new RuntimeException("exitValue: " + p.exitValue());

def json = new net.minidev.json.JSONObject()
json.put("occi.paas.state", "up")
result = json.toJSONString()
println result

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>

        <task name="update-occi">
            <genericInformation>
                <info name="NODE_ACCESS_TOKEN" value="${occi.compute.hostname}"/>
            </genericInformation>
            <depends>
                <task ref="start-es"/>
            </depends>
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

String name = '${occi.compute.hostname}'

String ifconfig = "ifconfig eth0".execute().text.trim()
String hostname = "hostname".execute().text.trim()

println "IFCONFIG COMMAND: '$ifconfig'"
println "HOSTNAME COMMAND: '$hostname'"

def regex = /(?s).*inet addr:(.*?)Bcast:.*/
def matcher = (ifconfig=~regex)

def ip = "unknownip"
if (matcher.matches()) {
    ip = matcher.group(1).trim()
} else {
    println("Cannot extract IP")
}

def json = new net.minidev.json.JSONObject();
json.put("occi.networkinterface.address", ip.trim())
json.put("occi.compute.hostname", name.trim())
json.put("occi.compute.organization.name", hostname.trim())
json.put("action.state", "done")
json.put("occi.compute.state", "up")
json.put("occi.paas.application.endpoints", "http://" + ip.trim() + ":9200")
result = json.toJSONString()
println result

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>
    </taskFlow>

</job>
