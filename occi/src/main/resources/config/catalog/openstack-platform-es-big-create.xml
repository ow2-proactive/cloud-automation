<?xml version="1.0" encoding="UTF-8"?>
<job xmlns="urn:proactive:jobdescriptor:dev" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:proactive:jobdescriptor:dev ../../src/scheduler/src/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/dev/schedulerjob.xsd" name="openstack-platform-es-big-create" priority="normal" cancelJobOnError="true">

    <variables>
        <variable name="occi.core.id"/>
        <variable name="elasticity.vm.count.maximum"/>
        <variable name="elasticity.vm.count.minimum"/>

        <!-- Output -->
        <variable name="occi.paas.elasticity.masterplatform" value="OUTPUT"/>
        <variable name="occi.paas.elasticity.trigger" value="OUTPUT"/>

        <!-- Provided by rule -->
        <variable name="occi.server.endpoint"/>
        <variable name="iaas.provider.api.gateway.hostname"/>
        <variable name="iaas.provider.api.gateway.addons.dir"/>
    </variables>

    <jobClasspath>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/commons-codec-1.6.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/commons-io-1.3.2.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/commons-lang-2.6.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/commons-logging-1.1.1.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/connectors-3.5.0-SNAPSHOT.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/httpclient-4.2.1.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/httpcore-4.2.1.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/iaas-api-3.5.0-SNAPSHOT.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/json-path-0.9.1.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/json-smart-1.1.1.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/monitoring-3.5.0-SNAPSHOT.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/nova-3.5.0-SNAPSHOT.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/occi-1.0-SNAPSHOT.jar"/>
        <pathElement path="${iaas.provider.api.gateway.addons.dir}/workflow-catalog-1.0-SNAPSHOT.jar"/>
    </jobClasspath>

    <genericInformation>
        <info name="category" value="platform"/>
        <info name="operation" value="create"/>
        <info name="action" value="start"/>
        <info name="provider" value="openstack"/>
        <info name="application" value="elasticsearch"/>
        <info name="flavor" value="elastic"/>
    </genericInformation>

    <taskFlow>
        <task name="create-initial-es">
            <selection>
                <script type="dynamic" >
                    <code language="javascript">
                        <![CDATA[
var hostName = "${iaas.provider.api.gateway.hostname}";
if (org.ow2.proactive.scripting.helper.selection.SelectionUtils.checkHostName(hostName)) {
   selected = true;
   print("Hostname = " + hostName + " ==> selected");
} else {
   selected = false;
   print("Hostname <> " + hostName + " ==> not selected");
}
]]>
                    </code>
                </script>
            </selection>

            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

import org.ow2.proactive.brokering.occi.client.OcciClient

println "Current category ID: ${occi.core.id}"

def vmName = "EsMasterE-" + new Random().nextInt(10000)
def occiServerUrl = "${occi.server.endpoint}"
def client = new OcciClient(occiServerUrl);
Map<String, String> ar = new HashMap<String, String>();
ar.put("rule","try");
ar.put("provider","openstack");
ar.put("occi.compute.hostname", vmName);
ar.put("flavor", "single");
ar.put("application", "elasticsearch");

def resource = client.createResource("platform", ar);

def json = new net.minidev.json.JSONObject();
json.put("occi.paas.application.endpoints", resource.getLocation())
json.put("occi.paas.elasticity.masterplatform", resource.getLocation());
result = json.toJSONString()
println result

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>

        <task name="create-initial-trigger">
            <depends>
                <task ref="create-initial-es"/>
            </depends>
            <selection>
                <script type="dynamic" >
                    <code language="javascript">
                        <![CDATA[
var hostName = "${iaas.provider.api.gateway.hostname}";
if (org.ow2.proactive.scripting.helper.selection.SelectionUtils.checkHostName(hostName)) {
   selected = true;
   print("Hostname = " + hostName + " ==> selected");
} else {
   selected = false;
   print("Hostname <> " + hostName + " ==> not selected");
}
]]>
                    </code>
                </script>
            </selection>
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

import org.ow2.proactive.brokering.occi.client.OcciClient
import com.jayway.jsonpath.JsonPath

String prevresult = results[0].toString()
net.minidev.json.JSONObject json1 = JsonPath.parse(prevresult).json()
def basePlatform = json1.get("occi.paas.elasticity.masterplatform")
println "Platform of base: $basePlatform"

def occiServerUrl = "${occi.server.endpoint}"
def client = new OcciClient(occiServerUrl);

Map<String, String> ar = new HashMap<String, String>();
ar.put("rule","try");
ar.put("action.state", "done");
ar.put("occi.monitoring.periodms", "120000");
ar.put("occi.monitoring.condition", "ConditionES.groovy")
ar.put("occi.monitoring.trueaction", "ActionTrueES.groovy")
ar.put("occi.monitoring.falseaction", "ActionFalseES.groovy")
ar.put("occi.monitoring.stopaction", "ActionStopES.groovy")
ar.put("elasticity.vm.count.maximum", "${elasticity.vm.count.maximum}")
ar.put("elasticity.vm.count.minimum", "${elasticity.vm.count.minimum}")
ar.put("occi.paas.elasticity.masterplatform", basePlatform)
ar.put("occi.server.endpoint", occiServerUrl)

def resource = client.createResource("actiontrigger", ar);

def json = new net.minidev.json.JSONObject();
json.put("occi.paas.elasticity.trigger", resource.getLocation());
json.put("action.state", "done");
result = json.toJSONString()
println result

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>

    </taskFlow>

</job>
