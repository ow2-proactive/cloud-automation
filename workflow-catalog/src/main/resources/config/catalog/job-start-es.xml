<?xml version="1.0" encoding="UTF-8"?>
<job xmlns="urn:proactive:jobdescriptor:dev" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="urn:proactive:jobdescriptor:dev ../../src/scheduler/src/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/dev/schedulerjob.xsd"
	name="job-start-es" priority="normal" cancelJobOnError="true">
    <variables>
        <variable name="saas.elasticsearch.home" value="/home/proactive/es"/>
        <variable name="saas.elasticsearch.master.ip" value="192.168.1.1"/>
        <variable name="saas.elasticsearch.node.name" value="token"/>
    </variables>

    <genericInformation>
        <info name="category" value="compute"/>
        <info name="operation" value="create"/>
        <info name="action" value="start"/>
        <info name="provider" value="numergy"/>
    </genericInformation>

	<taskFlow>
        <task name="start-es">
            <genericInformation>
                <info name="NODE_ACCESS_TOKEN" value="${saas.elasticsearch.node.name}"/>
            </genericInformation>
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[

import org.apache.commons.io.FileUtils

def elasticSearchHome = "${saas.elasticsearch.home}"
def elasticSearchMasterIp = "${saas.elasticsearch.master.ip}"
def elasticSearchNodeName = "${saas.elasticsearch.node.name}"

def SEP = File.separator
def configFilePath = elasticSearchHome + SEP + "config" + SEP + "elasticsearch.yml"
def binFilePath = elasticSearchHome + SEP + "bin" + SEP + "elasticsearch"
def pidFilePath = SEP + "tmp" + SEP + "es.pid"
def logFilePath = SEP + "tmp" + SEP + "es.log"

// Create/modify config file
def masterConfigLines = new StringBuilder()
masterConfigLines.append("node.name: ")
masterConfigLines.append(elasticSearchNodeName)
masterConfigLines.append("\n")
masterConfigLines.append("discovery.zen.ping.multicast.enabled: false")
masterConfigLines.append("\n")
masterConfigLines.append("discovery.zen.ping.unicast.hosts: [\"")
masterConfigLines.append(elasticSearchMasterIp)
masterConfigLines.append("\"]")
masterConfigLines.append("\n")

println "Writing to file: $configFilePath the following:"
println "---"
println "$masterConfigLines"
println "---"

def configFile = new File(configFilePath)

if (configFile.exists())
    FileUtils.writeStringToFile(configFile, masterConfigLines.toString());
else
    throw new RuntimeException("Config file not found: $configFilePath")

def pidFile = new File(pidFilePath)

if (pidFile.exists())
    pidFile.delete()

// Start ElasticSearch

['/bin/sh', '-c', "ssh localhost \"nohup $binFilePath -p $pidFilePath &> $logFilePath &\""].execute()

// Wait for it to create the PID file
Thread.sleep(1000 * 10)

// Check that the PID file exists
if (pidFile.exists())
    println "Process running (PID file exists)"
else
    throw new RuntimeException("Process not running (PID file does not exist)")

println "ls -lah /tmp".execute().text

def result = FileUtils.readFileToString(pidFile)

]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>
    </taskFlow>
</job>

