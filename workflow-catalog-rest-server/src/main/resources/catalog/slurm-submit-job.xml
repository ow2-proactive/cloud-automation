<?xml version="1.0" encoding="UTF-8"?>
<job xmlns="urn:proactive:jobdescriptor:dev" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:proactive:jobdescriptor:dev ../../src/scheduler/src/org/ow2/proactive/scheduler/common/xml/schemas/jobdescriptor/dev/schedulerjob.xsd" name="slurm-submit-job" priority="normal" cancelJobOnError="true">

    <variables>

        <!-- workdir : working directory where SLURM job will be executed -->
        <!-- workdir can be: <directory> or empty to execute in HOME -->
        <variable name="workdir" value=""/>

        <!-- arguments : arguments to submit SLURM job -->
        <!-- arguments can be: all valid arguments for sbatch command ... -->
        <variable name="arguments" value="--exclusive"/>

        <!-- script : DATASPACE path of SLURM job (sbatch) to execute -->
        <!-- script can be: USERSPACE:/test.sh after pushing file test.sh to USERSPACE ... -->
        <variable name="script" value="USERSPACE:/test.sh"/>

        <!-- script.arguments : arguments to the SLURM script -->
        <variable name="script.arguments" value=""/>

    </variables>

	<taskFlow>

        <task name="submit-job" runAsMe="true" >
            <inputFiles>
                <!-- Only script -->
                <!--<files includes="${script}" accessMode="transferFromUserSpace"/>-->
                <!-- All files -->
                <files includes="*" accessMode="transferFromUserSpace"/>
            </inputFiles>
            <scriptExecutable>
                <script >
                    <code language="groovy">
                        <![CDATA[
                        import groovy.json.JsonOutput
                        import org.ow2.proactive.datascale.slurm.OutputParser

                        def sbatch = "sbatch"
                        def sbatch_workdir = variables.get("workdir")
                        def sbatch_arguments = variables.get("arguments")
                        def sbatch_script = variables.get("script")
                        def sbatch_script_arguments = variables.get("script.arguments")

                        def root = new File(new URI(localspace.getRealURI())).getAbsoluteFile()

                        def workdir = new File(sbatch_workdir).getAbsoluteFile()
                        if (sbatch_workdir.isEmpty() || !workdir.isDirectory()) {
                            println "Not a directory: '$workdir'. Using home directory instead."
                            workdir = new File(System.getProperty("user.home")).getAbsoluteFile()
                        }

                        sbatch_script = sbatch_script.replace("USERSPACE:", root.getAbsolutePath())
                        sbatch_script_arguments = sbatch_script_arguments.replace("USERSPACE:", root.getAbsolutePath())

                        def cmd = sbatch + " " + " " + sbatch_arguments + " " + sbatch_script + " " + sbatch_script_arguments
                        def p = cmd.execute([], workdir)
                        p.waitFor()
                        def stderr = p.err.text
                        def stdout = p.text
                        def errcode = p.exitValue()

                        def job = getJobId(stdout)

                        result = JsonOutput.toJson(
                                [
                                        slurmjob: job,
                                        errcode: errcode,
                                        cmd: cmd,
                                        workdir: workdir.getAbsolutePath(),
                                        script: sbatch_script,
                                        stdout: stdout,
                                        stderr: stderr
                                ])

                        println "Result: " + JsonOutput.prettyPrint(result)

                        def getJobId(txt) {
                            def regx = /(?s).*?job (\d+).*?/
                            def matcher = ( txt =~ regx )

                            if (matcher.matches()) {
                                return matcher[0][1]
                            } else {
                                return "unknown"
                            }
                        }

                        ]]>
                    </code>
                </script>
            </scriptExecutable>
        </task>

    </taskFlow>
</job>

